this is my file one for git course
adding more content to file one  

// git code in terminal
git --version
git status


//Your config settings
git config --global user.email "your-email@example.com"
git config --global user.name "Your Name"
git config --list


//Creating a repository
git status
git init

//Stage
git init
git add <file> <file2> 
OR
git add .
git status

//Commit
git commit -m "commit message"
git status

//Logs
git log 
OR
git log --oneline

//change default code editor
git config --global core.editor "code --wait"

//gitignore
node_modules
.env
.vscode

// Creating a new branch

-> git branch bug-fix
-> git branch
-> git switch bug-fix
-> git log
-> git switch master
-> git switch -c dark-mode
-> git checkout orange-mode


Some points to note:

git branch - This command lists all the branches in the current repository.
git branch bug-fix - This command creates a new branch called bug-fix.
git switch bug-fix - This command switches to the bug-fix branch.
git log - This command shows the commit history for the current branch.
git switch master - This command switches to the master branch.
git switch -c dark-mode - This command creates a new branch called dark-mode. the -c flag is used to create a new branch.
git checkout orange-mode - This command switches to the orange-mode branch.
Commit before switching to a branch
Go to .git folder and checkout to the HEAD file


Commit before switching to a branch
Go to .git folder and checkout to the HEAD file


//Merging branches
//Fast-forward merge

->git checkout main
->git merge bug-fix

// Not fast-forward merge

->git checkout main
->git merge bug-fix

If the command are same, what is the difference between fast-forward and not fast-forward merge?

The difference is resolving the conflicts. In a fast-forward merge, there are no conflicts. But in a not fast-forward merge, there are conflicts, and there are no shortcuts to resolve them. You have to manually resolve the conflicts. Decide, what to keep and what to discard. VSCode has a built-in merge tool that can help you resolve the conflicts.

Rename a branch
You can rename a branch using the following command:

->git branch -m <old-branch-name> <new-branch-name>

Delete a branch
You can delete a branch using the following command:

->git branch -d <branch-name>

List all branches
You can list all branches using the following command:

->git branch

// Abort merge

-> git merge --abort


// Comparing Working Directory and Staging Area

->git diff

// Comparing Staging Area with Repository

-> git diff --staged

// Comparing between branches

-> git diff <branch-name-one> <branch-name-two>

-> git diff <commit-hash-one> <commit-hash-two>

-> git diff <branch-name-one>..<branch-name-two>

-> git diff <commit-hash-one>..<commit-hash-two>

// Git Stash

-> git stash

// Naming the stash

-> git stash save "work in progress on X feature"

// View the stash list

-> git stash list

// git stash list

-> git stash apply

// Apply the specific stash

git stash apply stash@{0}

// Applying and dropping the stash

git stash pop

// Drop the stash

git stash drop

// Applying stash to a specific branch

-> git stash apply stash@{0} <branch-name>

// Clearing the stash

-> git stash clear