this is my file one for git course
adding more content to file one  

// git code in terminal
git --version
git status


//Your config settings
git config --global user.email "your-email@example.com"
git config --global user.name "Your Name"
git config --list


//Creating a repository
git status
git init

//Stage
git init
git add <file> <file2> 
OR
git add .
git status

//Commit
git commit -m "commit message"
git status

//Logs
git log 
OR
git log --oneline

//change default code editor
git config --global core.editor "code --wait"

//gitignore
node_modules
.env
.vscode

// Creating a new branch

-> git branch bug-fix
-> git branch
-> git switch bug-fix
-> git log
-> git switch master
-> git switch -c dark-mode
-> git checkout orange-mode


Some points to note:

git branch - This command lists all the branches in the current repository.
git branch bug-fix - This command creates a new branch called bug-fix.
git switch bug-fix - This command switches to the bug-fix branch.
git log - This command shows the commit history for the current branch.
git switch master - This command switches to the master branch.
git switch -c dark-mode - This command creates a new branch called dark-mode. the -c flag is used to create a new branch.
git checkout orange-mode - This command switches to the orange-mode branch.
Commit before switching to a branch
Go to .git folder and checkout to the HEAD file


Commit before switching to a branch
Go to .git folder and checkout to the HEAD file


//Merging branches
//Fast-forward merge

->git checkout main
->git merge bug-fix

// Not fast-forward merge

->git checkout main
->git merge bug-fix

If the command are same, what is the difference between fast-forward and not fast-forward merge?

The difference is resolving the conflicts. In a fast-forward merge, there are no conflicts. But in a not fast-forward merge, there are conflicts, and there are no shortcuts to resolve them. You have to manually resolve the conflicts. Decide, what to keep and what to discard. VSCode has a built-in merge tool that can help you resolve the conflicts.

Rename a branch
You can rename a branch using the following command:

->git branch -m <old-branch-name> <new-branch-name>

Delete a branch
You can delete a branch using the following command:

->git branch -d <branch-name>

List all branches
You can list all branches using the following command:

->git branch

// Abort merge

-> git merge --abort


// Comparing Working Directory and Staging Area

->git diff

// Comparing Staging Area with Repository

-> git diff --staged

// Comparing between branches

-> git diff <branch-name-one> <branch-name-two>

-> git diff <commit-hash-one> <commit-hash-two>

-> git diff <branch-name-one>..<branch-name-two>

-> git diff <commit-hash-one>..<commit-hash-two>

// Git Stash

-> git stash

// Naming the stash

-> git stash save "work in progress on X feature"

// View the stash list

-> git stash list

// Apply stash

-> git stash apply

// Apply the specific stash

git stash apply stash@{0}

// Applying and dropping the stash

git stash pop

// Drop the stash

git stash drop

// Applying stash to a specific branch

-> git stash apply stash@{0} <branch-name>

// Clearing the stash

-> git stash clear


// Git Tags
Tags are a way to mark a specific point in your repository. They are useful when you want to remember a specific version of your code or when you want to refer to a specific commit. Tags are like sticky notes that you can attach to your commits.

// Creating a tag

git tag <tag-name>

// Create an annotated tag

git tag -a <tag-name> -m "Release 1.0"

// List all tags

-> git tag
-> git show <tag-name>
-> git tag -l "c*"


// Tagging a specific commit

git tag <tag-name> <commit-hash>

// Push tags to remote repository

->git push origin <tag-name>

// push all tags

-> git push origin --tags
-> git push --tags 

// Delete a tag

git tag -d <tag-name>
git tag -delete <tag-name>
git tag -d <tag-name> <tag-name> <tag-name> 

// Delete tag on remote repository

git push origin :<tag-name>
git push origin -d <tag-name>
git push origin --delete <tag-name>
git push origin --delete <tag-name> <tag-name> <tag-name>


// Rebase in git
Git rebase is a powerful Git feature used to change the base of a branch. It effectively allows you to move a branch to a new starting point, usually a different commit, by “replaying” the commits from the original base onto the new base. This can be useful for keeping a cleaner, linear project history.

Some people like to use rebase over the merge command because it allows you to keep the commit history cleaner and easier to understand. It also allows you to make changes to the code without affecting the original branch.

Merge commits
A merge commit is a commit that combines two or more commits into one. It is created when you merge two or more branches into a single branch. The merge commit contains all the changes from the original branches, and it is used to keep the project history clean and easy to understand.

Git and Github

Rebase
Rebase image

Rebase is a powerful tool in Git that allows you to move a branch to a new starting point. It effectively replays the commits from the original base onto the new base. This can be useful for keeping a cleaner, linear project history.

Here’s a flow example of using git rebase with all the commands involved:

Suppose you have a feature branch called feature-branch that you want to rebase onto the main branch.

Ensure you are on the branch you want to rebase:
Terminal window
git checkout feature-branch
git rebase main

This will replay the commits from feature-branch on top of the latest changes in main.

Resolve any conflicts:
If there are any conflicts, you will need to resolve them manually. You can use the merge tool in VSCode to resolve the conflicts.

Terminal window
git add <resolved-files>
git rebase --continue

Try to avoid —force option when using rebase. It can cause issues with the project history. I have seen many horror stories of people using —force to fix conflicts.

Git reflog
Git reflog is a command that shows you the history of your commits. It allows you to see the changes that you have made to your repository over time. This can be useful for debugging and understanding the history of your project.

View the reflog:
Terminal window
git reflog

This will show you the history of your commits. You can use the number at the end of each line to access the commit that you want to view.

Find specific commit
You can find a specific commit using the following command:

Terminal window
git reflog <commit-hash>

Recover lost commits or changes
If you accidentally deleted a branch or made changes that are no longer visible in the commit history, you can often recover them using the reflog. First, find the reference to the commit where the branch or changes existed, and then reset your branch to that reference.

Terminal window
git reflog <commit-hash>
git reset --hard <commit-hash>

or you can use HEAD@{n} to reset to the nth commit before the one you want to reset to.

Terminal window
git reflog <commit-hash>
git reset --hard HEAD@{1}

// new ssh key command
 ssh-keygen -t rsa -b 4096 -C "your_email@example.com"


// Check remote url setting

git remote -v


// Add remote repository
You can add a remote repository by running the following command:

git remote add origin <remote-url>

Here <remote-url> is the url of the remote repository that you want to add and origin is the name of the remote repository. This origin is used to refer to the remote repository in the future.


git remote add origin https://github.com/hiteshchoudhary/chai-something.git

// push code to remote repository
git push remote-name branch-name

Here remote-name is the name of the remote repository that you want to push to and branch-name is the name of the branch that you want to push.


git push origin main
 
// Setup an upstream remote
Setting up an upstream remote is useful when you want to keep your local repository up to date with the remote repository. It allows you to fetch and merge changes from the remote repository into your local repository.

To set up an upstream remote, you can use the following command:

Terminal window
git remote add upstream <remote-url>

or you can use shorthand:

git remote add -u <remote-url>
git push -u origin main
